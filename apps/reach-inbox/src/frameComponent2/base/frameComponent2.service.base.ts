/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FrameComponent2 as PrismaFrameComponent2,
} from "@prisma/client";

export class FrameComponent2ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FrameComponent2CountArgs, "select">
  ): Promise<number> {
    return this.prisma.frameComponent2.count(args);
  }

  async frameComponent2s(
    args: Prisma.FrameComponent2FindManyArgs
  ): Promise<PrismaFrameComponent2[]> {
    return this.prisma.frameComponent2.findMany(args);
  }
  async frameComponent2(
    args: Prisma.FrameComponent2FindUniqueArgs
  ): Promise<PrismaFrameComponent2 | null> {
    return this.prisma.frameComponent2.findUnique(args);
  }
  async createFrameComponent2(
    args: Prisma.FrameComponent2CreateArgs
  ): Promise<PrismaFrameComponent2> {
    return this.prisma.frameComponent2.create(args);
  }
  async updateFrameComponent2(
    args: Prisma.FrameComponent2UpdateArgs
  ): Promise<PrismaFrameComponent2> {
    return this.prisma.frameComponent2.update(args);
  }
  async deleteFrameComponent2(
    args: Prisma.FrameComponent2DeleteArgs
  ): Promise<PrismaFrameComponent2> {
    return this.prisma.frameComponent2.delete(args);
  }
}
