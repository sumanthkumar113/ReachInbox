/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FrameComponent as PrismaFrameComponent } from "@prisma/client";

export class FrameComponentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FrameComponentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.frameComponent.count(args);
  }

  async frameComponents(
    args: Prisma.FrameComponentFindManyArgs
  ): Promise<PrismaFrameComponent[]> {
    return this.prisma.frameComponent.findMany(args);
  }
  async frameComponent(
    args: Prisma.FrameComponentFindUniqueArgs
  ): Promise<PrismaFrameComponent | null> {
    return this.prisma.frameComponent.findUnique(args);
  }
  async createFrameComponent(
    args: Prisma.FrameComponentCreateArgs
  ): Promise<PrismaFrameComponent> {
    return this.prisma.frameComponent.create(args);
  }
  async updateFrameComponent(
    args: Prisma.FrameComponentUpdateArgs
  ): Promise<PrismaFrameComponent> {
    return this.prisma.frameComponent.update(args);
  }
  async deleteFrameComponent(
    args: Prisma.FrameComponentDeleteArgs
  ): Promise<PrismaFrameComponent> {
    return this.prisma.frameComponent.delete(args);
  }
}
