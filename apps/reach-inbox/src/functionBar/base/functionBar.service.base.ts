/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FunctionBar as PrismaFunctionBar } from "@prisma/client";

export class FunctionBarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FunctionBarCountArgs, "select">
  ): Promise<number> {
    return this.prisma.functionBar.count(args);
  }

  async functionBars(
    args: Prisma.FunctionBarFindManyArgs
  ): Promise<PrismaFunctionBar[]> {
    return this.prisma.functionBar.findMany(args);
  }
  async functionBar(
    args: Prisma.FunctionBarFindUniqueArgs
  ): Promise<PrismaFunctionBar | null> {
    return this.prisma.functionBar.findUnique(args);
  }
  async createFunctionBar(
    args: Prisma.FunctionBarCreateArgs
  ): Promise<PrismaFunctionBar> {
    return this.prisma.functionBar.create(args);
  }
  async updateFunctionBar(
    args: Prisma.FunctionBarUpdateArgs
  ): Promise<PrismaFunctionBar> {
    return this.prisma.functionBar.update(args);
  }
  async deleteFunctionBar(
    args: Prisma.FunctionBarDeleteArgs
  ): Promise<PrismaFunctionBar> {
    return this.prisma.functionBar.delete(args);
  }
}
