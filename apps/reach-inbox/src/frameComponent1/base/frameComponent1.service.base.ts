/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FrameComponent1 as PrismaFrameComponent1,
} from "@prisma/client";

export class FrameComponent1ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FrameComponent1CountArgs, "select">
  ): Promise<number> {
    return this.prisma.frameComponent1.count(args);
  }

  async frameComponent1s(
    args: Prisma.FrameComponent1FindManyArgs
  ): Promise<PrismaFrameComponent1[]> {
    return this.prisma.frameComponent1.findMany(args);
  }
  async frameComponent1(
    args: Prisma.FrameComponent1FindUniqueArgs
  ): Promise<PrismaFrameComponent1 | null> {
    return this.prisma.frameComponent1.findUnique(args);
  }
  async createFrameComponent1(
    args: Prisma.FrameComponent1CreateArgs
  ): Promise<PrismaFrameComponent1> {
    return this.prisma.frameComponent1.create(args);
  }
  async updateFrameComponent1(
    args: Prisma.FrameComponent1UpdateArgs
  ): Promise<PrismaFrameComponent1> {
    return this.prisma.frameComponent1.update(args);
  }
  async deleteFrameComponent1(
    args: Prisma.FrameComponent1DeleteArgs
  ): Promise<PrismaFrameComponent1> {
    return this.prisma.frameComponent1.delete(args);
  }
}
