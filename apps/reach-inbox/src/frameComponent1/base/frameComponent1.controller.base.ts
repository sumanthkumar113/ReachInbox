/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FrameComponent1Service } from "../frameComponent1.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FrameComponent1CreateInput } from "./FrameComponent1CreateInput";
import { FrameComponent1 } from "./FrameComponent1";
import { FrameComponent1FindManyArgs } from "./FrameComponent1FindManyArgs";
import { FrameComponent1WhereUniqueInput } from "./FrameComponent1WhereUniqueInput";
import { FrameComponent1UpdateInput } from "./FrameComponent1UpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FrameComponent1ControllerBase {
  constructor(
    protected readonly service: FrameComponent1Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FrameComponent1 })
  @nestAccessControl.UseRoles({
    resource: "FrameComponent1",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFrameComponent1(
    @common.Body() data: FrameComponent1CreateInput
  ): Promise<FrameComponent1> {
    return await this.service.createFrameComponent1({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FrameComponent1] })
  @ApiNestedQuery(FrameComponent1FindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FrameComponent1",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async frameComponent1s(
    @common.Req() request: Request
  ): Promise<FrameComponent1[]> {
    const args = plainToClass(FrameComponent1FindManyArgs, request.query);
    return this.service.frameComponent1s({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FrameComponent1 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FrameComponent1",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async frameComponent1(
    @common.Param() params: FrameComponent1WhereUniqueInput
  ): Promise<FrameComponent1 | null> {
    const result = await this.service.frameComponent1({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FrameComponent1 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FrameComponent1",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFrameComponent1(
    @common.Param() params: FrameComponent1WhereUniqueInput,
    @common.Body() data: FrameComponent1UpdateInput
  ): Promise<FrameComponent1 | null> {
    try {
      return await this.service.updateFrameComponent1({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FrameComponent1 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FrameComponent1",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFrameComponent1(
    @common.Param() params: FrameComponent1WhereUniqueInput
  ): Promise<FrameComponent1 | null> {
    try {
      return await this.service.deleteFrameComponent1({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
